{"repository_name":"csuuid","body":"[![CSUUID.cr CI](https://github.com/wyhaines/csuuid.cr/actions/workflows/ci.yml/badge.svg)](https://github.com/wyhaines/csuuid.cr/actions/workflows/ci.yml)\n[![CSUUID.cr Build Docs](https://github.com/wyhaines/csuuid.cr/actions/workflows/build_docs.yml/badge.svg)](https://github.com/wyhaines/csuuid.cr/actions/workflows/build_docs.yml)\n\n[![GitHub release](https://img.shields.io/github/release/wyhaines/CSUUID.cr.svg?style=for-the-badge)](https://github.com/wyhaines/CSUUID.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/CSUUID.cr/latest?style=for-the-badge)\n\n# CSUUID\n\nThis struct wraps up a UUID that encodes a timestamp measured as seconds from the epoch `(0001-01-01 00:00:00.0 UTC)` observed at the location where the timestamp was generated, plus nanoseconds in the current second, plus 6 bytes for unique identification of the source -- this could be an IPV4 address with two null bytes, a MAC address, or some other sequence that will fit in 6 bytes.\n  \nNanoseconds will fit in an Int32 (4 bytes), but seconds since the epoch will not. The current number of seconds leaks a short distance into a 5th byte, meaning that in this class, it has to be represented by an Int64. This is problematic because a UID allows for 16 bytes, so the use of 8 for seconds and 4 for nanoseconds leaves only 4 bytes for system identification. It also leaves three bytes in the UUID as zeros because 8 bytes for seconds is a lot of seconds.\n    \nOne solution is to combine the seconds and the nanoseconds into a single Int64 number. This requires math operations to do efficiently:\n\n```\n(seconds * 1000000000) + nanoseconds\n```\n\nand then more math to extract the original numbers in order to reconstruct the original timestamp. This leaves 8 bytes for identification or other uniqueness information, which is lovely, but the math requirement is less lovely.\n  \nThe other options is to truncate 2 bytes off of the seconds, storing 6 bytes of seconds data. This leaves 6 bytes for identification.\n    \nThe current implementation chose option #2, as it is less work to generate a UUID if math is not involved.\n\nThe byte structure of the CSUUID is:\n\n``` \n+-------------+-----------------+------------+\n| nanoseconds |     seconds     | identifier |\n|    0..3     |      4..10      |   11..15   |\n+-------------+-----------------+------------+\n```\n\nThe representational structure of the CSUUID, however, is itself sortable, as are the objects themselves.\n\n```plain\n.00.0e.d9.eb.-.7e.05.-.08.ae.-.f2.9c.-.df.18.10.1c.4a.dc.\n^      seconds       ^  nanoseconds  ^identifier/entropy^\n```\n\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     csuuid:\n       github: wyhaines/csuuid.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"csuuid\"\n\nuuid = CSUUID.new\n\nuuid = CSUUID.new(seconds: 9223372036, nanoseconds: 729262400)\n\nuuid = CSUUID.new(identifier: Random.new.random_bytes(6))\n\ndt = ParseDate.parse(\"2020/07/29 09:15:37\")\nuuid = CSUUID.new(dt)\n```\n\n## API Docs\n\nhttps://wyhaines.github.io/csuuid.cr/\n\n## Contributing\n\n1. Fork it (<https://github.com/wyhaines/csuuid.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kirk Haines](https://github.com/wyhaines) - creator and maintainer\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/CSUUID.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/CSUUID.cr?style=for-the-badge)","program":{"html_id":"csuuid/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"csuuid","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"csuuid/CSUUID","path":"CSUUID.html","kind":"struct","full_name":"CSUUID","name":"CSUUID","abstract":false,"superclass":{"html_id":"csuuid/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"csuuid/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"csuuid/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"csuuid/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/csuuid.cr","line_number":56,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L56"},{"filename":"src/version.cr","line_number":1,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/version.cr#L1"}],"repository_name":"csuuid","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.1\""}],"doc":"This struct wraps up a UUID that encodes a timestamp measured as seconds\nfrom the epoch (0001-01-01 00:00:00.0 UTC) observed at the location where\nthe timestamp was generated, plus nanoseconds in the current second, plus\n6 bytes for unique identification of the source -- this could be an\nIPV4 address with two null bytes, a MAC address, or some other sequence\nthat will fit in 6 bytes.\n\nNanoseconds will fit in an Int32 (4 bytes), but seconds since the epoch\nwill not. The current number of seconds leaks a short distance into a\n5th byte, meaning that in this class, it has to be represented by an\nInt64. This is problematic because a UID allows for 16 bytes, so the\nuse of 8 for seconds and 4 for nanoseconds leaves only 4 bytes for system\nidentification. It also leaves three bytes in the UUID as zeros because 8\nbytes for seconds is a lot of seconds.\n\nOne solution is to combine the seconds and the nanoseconds into a single\nInt64 number. This requires math operations to do efficiently:\n    (seconds * 1000000000) + nanoseconds\nand then more math to extract the original numbers in order to reconstruct\nthe original timestamp. This leaves 8 bytes for identification or other\nuniqueness information, which is lovely, but the math requirement is less\nlovely.\n\nThe other options is to truncate 2 bytes off of the seconds, storing\n6 bytes of seconds data. This leaves 6 bytes for identification.\n\nThe current implementation chose option #2, as it is less work to generate\na UUID if math is not involved.\n\nThus, the byte structure of a CSUUID is as follows:\n\nAn argument could be made for decreasing the nanosecond resolution to something\nmore granular, and adding those bytes to the identifier/entropy portion of the\nID, but as designed this structure allows for very precise sorting of the IDs.\n\n```plain\n+-------------+-----------------+------------+\n| nanoseconds |     seconds     | identifier |\n|    0..3     |      4..10      |   11..15   |\n+-------------+-----------------+------------+\n```\n\nThe representational structure of the CSUUID, however, is itself sortable, as are the objects themselves.\n\n```plain\n.00.0e.d9.eb.-.7e.05.-.08.ae.-.f2.9c.-.df.18.10.1c.4a.dc.\n^      seconds       ^  nanoseconds  ^identifier/entropy^\n```\n","summary":"<p>This struct wraps up a UUID that encodes a timestamp measured as seconds from the epoch (0001-01-01 00:00:00.0 UTC) observed at the location where the timestamp was generated, plus nanoseconds in the current second, plus 6 bytes for unique identification of the source -- this could be an IPV4 address with two null bytes, a MAC address, or some other sequence that will fit in 6 bytes.</p>","class_methods":[{"html_id":"generate(count)-class-method","name":"generate","doc":"Generate a sequence of CSUUIDS of the requested *count* length.","summary":"<p>Generate a sequence of CSUUIDS of the requested <em>count</em> length.</p>","abstract":false,"args":[{"name":"count","external_name":"count","restriction":""}],"args_string":"(count)","args_html":"(count)","location":{"filename":"src/csuuid.cr","line_number":93,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L93"},"def":{"name":"generate","args":[{"name":"count","external_name":"count","restriction":""}],"visibility":"Public","body":"result = [] of CSUUID\ncount.times do\n  result << unique\nend\nresult\n"}},{"html_id":"prng:Random-class-method","name":"prng","doc":"CSUUID will work with any source of entropy that inherits from Random.\nIt defaults to `Random::ISAAC`.","summary":"<p>CSUUID will work with any source of entropy that inherits from Random.</p>","abstract":false,"location":{"filename":"src/csuuid.cr","line_number":59,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L59"},"def":{"name":"prng","return_type":"Random","visibility":"Public","body":"@@prng"}},{"html_id":"prng=(prng:Random)-class-method","name":"prng=","doc":"CSUUID will work with any source of entropy that inherits from Random.\nIt defaults to `Random::ISAAC`.","summary":"<p>CSUUID will work with any source of entropy that inherits from Random.</p>","abstract":false,"args":[{"name":"prng","external_name":"prng","restriction":"Random"}],"args_string":"(prng : Random)","args_html":"(prng : Random)","location":{"filename":"src/csuuid.cr","line_number":59,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L59"},"def":{"name":"prng=","args":[{"name":"prng","external_name":"prng","restriction":"Random"}],"visibility":"Public","body":"@@prng = prng"}},{"html_id":"unique-class-method","name":"unique","doc":"Generate a guaranteed unique (for this process) CSUUID.","summary":"<p>Generate a guaranteed unique (for this process) CSUUID.</p>","abstract":false,"location":{"filename":"src/csuuid.cr","line_number":73,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L73"},"def":{"name":"unique","visibility":"Public","body":"@@mutex.sync do\n  t = Time.local\n  if (t.internal_nanoseconds == @@unique_seconds_and_nanoseconds[1]) && (t.internal_seconds == @@unique_seconds_and_nanoseconds[0])\n    increment_unique_identifier\n  else\n    @@unique_seconds_and_nanoseconds = {t.internal_seconds, t.internal_nanoseconds}\n    @@unique_identifier = prng.random_bytes(6)\n  end\n  new(@@unique_seconds_and_nanoseconds[0], @@unique_seconds_and_nanoseconds[1], @@unique_identifier)\nend"}}],"constructors":[{"html_id":"new(seconds:Int64,nanoseconds:Int32,identifier:Slice(UInt8)|String|Nil=nil)-class-method","name":"new","doc":"Create a new CSUUID from the given seconds, nanoseconds, and optional identifier/entropy.","summary":"<p>Create a new CSUUID from the given seconds, nanoseconds, and optional identifier/entropy.</p>","abstract":false,"args":[{"name":"seconds","external_name":"seconds","restriction":"Int64"},{"name":"nanoseconds","external_name":"nanoseconds","restriction":"Int32"},{"name":"identifier","default_value":"nil","external_name":"identifier","restriction":"Slice(UInt8) | String | Nil"}],"args_string":"(seconds : Int64, nanoseconds : Int32, identifier : Slice(UInt8) | String | Nil = nil)","args_html":"(seconds : Int64, nanoseconds : Int32, identifier : Slice(UInt8) | String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/csuuid.cr","line_number":129,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L129"},"def":{"name":"new","args":[{"name":"seconds","external_name":"seconds","restriction":"Int64"},{"name":"nanoseconds","external_name":"nanoseconds","restriction":"Int32"},{"name":"identifier","default_value":"nil","external_name":"identifier","restriction":"Slice(UInt8) | String | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(seconds, nanoseconds, identifier)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(uuid:String)-class-method","name":"new","doc":"Create a new CSUUID from the string representation of a UUID, with or without dashes.\nIf the string represents a CSUUID, the new CSUUID will be a copy of the original. If\nthe string represents a traditional UUID, the new CSUUID will have a different byte\norder from the original.","summary":"<p>Create a new CSUUID from the string representation of a UUID, with or without dashes.</p>","abstract":false,"args":[{"name":"uuid","external_name":"uuid","restriction":"String"}],"args_string":"(uuid : String)","args_html":"(uuid : String)","location":{"filename":"src/csuuid.cr","line_number":114,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L114"},"def":{"name":"new","args":[{"name":"uuid","external_name":"uuid","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(uuid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(uuid:UUID|CSUUID)-class-method","name":"new","doc":"Create a new CSUUID from a given UUID or CSUUID object. If the object is a CSUUID,\nthe new CSUUID will be a copy of the original. If the object is a traditional UUID,\nthe new CSUUID will have a different byte order from the original.","summary":"<p>Create a new CSUUID from a given UUID or CSUUID object.</p>","abstract":false,"args":[{"name":"uuid","external_name":"uuid","restriction":"UUID | CSUUID"}],"args_string":"(uuid : UUID | CSUUID)","args_html":"(uuid : UUID | <a href=\"CSUUID.html\">CSUUID</a>)","location":{"filename":"src/csuuid.cr","line_number":124,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L124"},"def":{"name":"new","args":[{"name":"uuid","external_name":"uuid","restriction":"UUID | CSUUID"}],"visibility":"Public","body":"_ = allocate\n_.initialize(uuid)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(timestamp:Time,identifier:Slice(UInt8)|String|Nil=nil)-class-method","name":"new","doc":"Create a new CSUUID from the given Time object and optional identifier/entropy.","summary":"<p>Create a new CSUUID from the given Time object and optional identifier/entropy.</p>","abstract":false,"args":[{"name":"timestamp","external_name":"timestamp","restriction":"Time"},{"name":"identifier","default_value":"nil","external_name":"identifier","restriction":"Slice(UInt8) | String | Nil"}],"args_string":"(timestamp : Time, identifier : Slice(UInt8) | String | Nil = nil)","args_html":"(timestamp : Time, identifier : Slice(UInt8) | String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/csuuid.cr","line_number":134,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L134"},"def":{"name":"new","args":[{"name":"timestamp","external_name":"timestamp","restriction":"Time"},{"name":"identifier","default_value":"nil","external_name":"identifier","restriction":"Slice(UInt8) | String | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(timestamp, identifier)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(identifier:Slice(UInt8)|Nil=nil)-class-method","name":"new","doc":"Create a new CSUUID from the given identifier/entropy value alone.","summary":"<p>Create a new CSUUID from the given identifier/entropy value alone.</p>","abstract":false,"args":[{"name":"identifier","default_value":"nil","external_name":"identifier","restriction":"Slice(UInt8) | Nil"}],"args_string":"(identifier : Slice(UInt8) | Nil = nil)","args_html":"(identifier : Slice(UInt8) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/csuuid.cr","line_number":139,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L139"},"def":{"name":"new","args":[{"name":"identifier","default_value":"nil","external_name":"identifier","restriction":"Slice(UInt8) | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(identifier)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<(other:CSUUID):Bool-instance-method","name":"<","doc":"Returns `true` if `self` is less than *other*.","summary":"<p>Returns <code>true</code> if <code>self</code> is less than <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"args_string":"(other : CSUUID) : Bool","args_html":"(other : <a href=\"CSUUID.html\">CSUUID</a>) : Bool","location":{"filename":"src/csuuid.cr","line_number":218,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L218"},"def":{"name":"<","args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"return_type":"Bool","visibility":"Public","body":"(self <=> other) == -1"}},{"html_id":"<=(other:CSUUID):Bool-instance-method","name":"<=","doc":"Returns `true` if `self` is less than or equal to *other*.","summary":"<p>Returns <code>true</code> if <code>self</code> is less than or equal to <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"args_string":"(other : CSUUID) : Bool","args_html":"(other : <a href=\"CSUUID.html\">CSUUID</a>) : Bool","location":{"filename":"src/csuuid.cr","line_number":228,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L228"},"def":{"name":"<=","args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"return_type":"Bool","visibility":"Public","body":"(self == other) || self < other"}},{"html_id":"<=>(other:CSUUID)-instance-method","name":"<=>","doc":"Compare two CSUUID objects, returning -1 if the first is less than the second,\n0 if they are equal, and 1 if the first is greater than the second.","summary":"<p>Compare two CSUUID objects, returning -1 if the first is less than the second, 0 if they are equal, and 1 if the first is greater than the second.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"args_string":"(other : CSUUID)","args_html":"(other : <a href=\"CSUUID.html\">CSUUID</a>)","location":{"filename":"src/csuuid.cr","line_number":205,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L205"},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"visibility":"Public","body":"s, ns = seconds_and_nanoseconds\ns_val, ns_val = other.seconds_and_nanoseconds\nr = s <=> s_val\nif r == 0\nelse\n  return r\nend\nr = ns <=> ns_val\nif r == 0\nelse\n  return r\nend\nto_s <=> other.to_s\n"}},{"html_id":">(other:CSUUID):Bool-instance-method","name":">","doc":"Returns `true` if `self` is greater than *other*.","summary":"<p>Returns <code>true</code> if <code>self</code> is greater than <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"args_string":"(other : CSUUID) : Bool","args_html":"(other : <a href=\"CSUUID.html\">CSUUID</a>) : Bool","location":{"filename":"src/csuuid.cr","line_number":223,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L223"},"def":{"name":">","args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"return_type":"Bool","visibility":"Public","body":"(self <=> other) == 1"}},{"html_id":">=(other:CSUUID):Bool-instance-method","name":">=","doc":"Returns `true` if `self` is greater than or equal to *other*.","summary":"<p>Returns <code>true</code> if <code>self</code> is greater than or equal to <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"args_string":"(other : CSUUID) : Bool","args_html":"(other : <a href=\"CSUUID.html\">CSUUID</a>) : Bool","location":{"filename":"src/csuuid.cr","line_number":233,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L233"},"def":{"name":">=","args":[{"name":"other","external_name":"other","restriction":"CSUUID"}],"return_type":"Bool","visibility":"Public","body":"(self == other) || self > other"}},{"html_id":"bytes:Slice(UInt8)-instance-method","name":"bytes","doc":"A getter to allow access to the raw byte buffer for the CSUUID.","summary":"<p>A getter to allow access to the raw byte buffer for the CSUUID.</p>","abstract":false,"location":{"filename":"src/csuuid.cr","line_number":66,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L66"},"def":{"name":"bytes","return_type":"Slice(UInt8)","visibility":"Public","body":"@bytes"}},{"html_id":"seconds_and_nanoseconds:Tuple(Int64,Int32)-instance-method","name":"seconds_and_nanoseconds","doc":"This returns a tuple containing the seconds since the epoch as well\nas the nanoseconds in the current second for the UUID.","summary":"<p>This returns a tuple containing the seconds since the epoch as well as the nanoseconds in the current second for the UUID.</p>","abstract":false,"location":{"filename":"src/csuuid.cr","line_number":169,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L169"},"def":{"name":"seconds_and_nanoseconds","return_type":"Tuple(Int64, Int32)","visibility":"Public","body":"sns = @seconds_and_nanoseconds\nif !sns.nil?\n  return sns\nend\nlong_seconds = Slice(UInt8).new(8)\nlong_seconds[2, 6].copy_from(@bytes[4, 6])\n@seconds_and_nanoseconds = {IO::ByteFormat::BigEndian.decode(Int64, long_seconds), IO::ByteFormat::BigEndian.decode(Int32, @bytes[0, 4])}\n"}},{"html_id":"timestamp:Time-instance-method","name":"timestamp","doc":"Return a Time object representing the timestamp encoded into the UUID as local time.","summary":"<p>Return a Time object representing the timestamp encoded into the UUID as local time.</p>","abstract":false,"location":{"filename":"src/csuuid.cr","line_number":182,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L182"},"def":{"name":"timestamp","return_type":"Time","visibility":"Public","body":"ts = @timestamp\nif ts.nil?\nelse\n  return ts\nend\nsns = seconds_and_nanoseconds\n@timestamp = Time.new(seconds: sns[0], nanoseconds: sns[1], location: @location)\n"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Return the String representation of the UUID.","summary":"<p>Return the String representation of the UUID.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/csuuid.cr","line_number":198,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L198"},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"hs = @bytes.hexstring\nio << \"#{hs[8..15]}-#{hs[16..19]}-#{hs[0..3]}-#{hs[4..7]}-#{hs[20..31]}\"\n"}},{"html_id":"utc:Time-instance-method","name":"utc","doc":"Return a Time object representing the timestamp encoded into the UUID as UTC time.","summary":"<p>Return a Time object representing the timestamp encoded into the UUID as UTC time.</p>","abstract":false,"location":{"filename":"src/csuuid.cr","line_number":190,"url":"https://github.com/wyhaines/csuuid.cr/blob/4cb8656a9214aede9c1840cad4acf8e55e658f2f/src/csuuid.cr#L190"},"def":{"name":"utc","return_type":"Time","visibility":"Public","body":"u = @utc\nif u.nil?\nelse\n  return u\nend\nsns = seconds_and_nanoseconds\n@utc = Time.utc(seconds: sns[0], nanoseconds: sns[1])\n"}}]}]}}